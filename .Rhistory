by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTest <- dataTest %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
dataTest <- dataTest %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
testProbs <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model, dataTest, type= "response"))
auc_value <- auc(testProbs$Outcome, testProbs$Probs)
threshold <- 0.4
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
results[[i]] <- list(
sensitivity = sensitivity,
specificity = specificity
)
cat("Iteration:", i, "AUC:", round(auc_value, 4), "Sensitivity:", round(sensitivity, 4),
"Specificity:", round(specificity, 4), "\n")
}
avg_sensitivity <- mean(sapply(results, function(res) res$sensitivity))
avg_specificity <- mean(sapply(results, function(res) res$specificity))
cat("Average Sensitivity over 30 runs:", round(avg_sensitivity, 4), "\n")
cat("Average Specificity over 30 runs:", round(avg_specificity, 4), "\n")
results <- list()
for (i in 1:100) {
set.seed(312+i)
trainIndex <- createDataPartition(data_model$occupancy_classifier, p = 0.7, list = FALSE, times = 1)
dataTrain <- data_model[trainIndex, ]
dataTest <- data_model[-trainIndex, ]
from_sum <- dataTrain %>%
group_by(from) %>%
summarize(from_count = n(),
from_sum = sum(occupancy_classifier, na.rm = TRUE))
to_sum <- dataTrain %>%
group_by(to) %>%
summarize(to_count = n(),
to_sum = sum(occupancy_classifier, na.rm = TRUE))
stations_train <- stations_sf[,c(1,12)] %>%
left_join(from_sum, by = c("code" = "from")) %>%
left_join(to_sum, by = c("code" = "to")) %>%
replace(is.na(.), 0) %>%
mutate(overall_count = from_count + to_count,
overall_sum = from_sum + to_sum)
coords <- st_coordinates(stations_train)
knn_nb <- knn2nb(knearneigh(coords, k = 5))
neighbor_results <- lapply(1:length(knn_nb), function(i) {
neighbors <- knn_nb[[i]]
overall_count_sum <- sum(stations_train$overall_count[neighbors], na.rm = TRUE)
overall_sum_sum <- sum(stations_train$overall_sum[neighbors], na.rm = TRUE)
return(data.frame(overall_count_sum = overall_count_sum, overall_sum_sum = overall_sum_sum))
})
neighbor_results_df <- do.call(rbind, neighbor_results)
stations_train <- stations_train %>%
bind_cols(neighbor_results_df) %>%
mutate(neighbor = overall_sum_sum / overall_count_sum) %>%
st_drop_geometry()
dataTrain <- dataTrain %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTrain <- dataTrain %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
datetime <- dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice(1:20) %>%
mutate(mapped_datetime = mapped_datetime + days(7)) %>%
bind_rows(
dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice((n() - 19):n()) %>%
mutate(mapped_datetime = mapped_datetime - days(7))
) %>%
bind_rows(dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime))
datetime <- datetime %>%
arrange(mapped_datetime)
dataTrain <- dataTrain %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
model <- glm(occupancy_classifier ~ type + Temperature + OD_passenger + OD_neighbor + rolling_avg + freq,
data = dataTrain, family="binomial" (link="logit"))
dataTest <- dataTest %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTest <- dataTest %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
dataTest <- dataTest %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
testProbs <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model, dataTest, type= "response"))
auc_value <- auc(testProbs$Outcome, testProbs$Probs)
threshold <- 0.4
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
results[[i]] <- list(
sensitivity = sensitivity,
specificity = specificity
)
cat("Iteration:", i, "AUC:", round(auc_value, 4), "Sensitivity:", round(sensitivity, 4),
"Specificity:", round(specificity, 4), "\n")
}
avg_sensitivity <- mean(sapply(results, function(res) res$sensitivity))
avg_specificity <- mean(sapply(results, function(res) res$specificity))
cat("Average Sensitivity over 30 runs:", round(avg_sensitivity, 4), "\n")
cat("Average Specificity over 30 runs:", round(avg_specificity, 4), "\n")
View(data_model)
results <- list()
for (i in 1:100) {
set.seed(312+i)
trainIndex <- createDataPartition(data_model$occupancy_classifier, p = 0.7, list = FALSE, times = 1)
dataTrain <- data_model[trainIndex, ]
dataTest <- data_model[-trainIndex, ]
from_sum <- dataTrain %>%
group_by(from) %>%
summarize(from_count = n(),
from_sum = sum(occupancy_classifier, na.rm = TRUE))
to_sum <- dataTrain %>%
group_by(to) %>%
summarize(to_count = n(),
to_sum = sum(occupancy_classifier, na.rm = TRUE))
stations_train <- stations_sf[,c(1,12)] %>%
left_join(from_sum, by = c("code" = "from")) %>%
left_join(to_sum, by = c("code" = "to")) %>%
replace(is.na(.), 0) %>%
mutate(overall_count = from_count + to_count,
overall_sum = from_sum + to_sum)
coords <- st_coordinates(stations_train)
knn_nb <- knn2nb(knearneigh(coords, k = 5))
neighbor_results <- lapply(1:length(knn_nb), function(i) {
neighbors <- knn_nb[[i]]
overall_count_sum <- sum(stations_train$overall_count[neighbors], na.rm = TRUE)
overall_sum_sum <- sum(stations_train$overall_sum[neighbors], na.rm = TRUE)
return(data.frame(overall_count_sum = overall_count_sum, overall_sum_sum = overall_sum_sum))
})
neighbor_results_df <- do.call(rbind, neighbor_results)
stations_train <- stations_train %>%
bind_cols(neighbor_results_df) %>%
mutate(neighbor = overall_sum_sum / overall_count_sum) %>%
st_drop_geometry()
dataTrain <- dataTrain %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTrain <- dataTrain %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
datetime <- dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice(1:20) %>%
mutate(mapped_datetime = mapped_datetime + days(7)) %>%
bind_rows(
dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice((n() - 19):n()) %>%
mutate(mapped_datetime = mapped_datetime - days(7))
) %>%
bind_rows(dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime))
datetime <- datetime %>%
arrange(mapped_datetime)
dataTrain <- dataTrain %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
model <- glm(occupancy_classifier ~ type + Temperature + day_time + OD_level,
data = dataTrain, family="binomial" (link="logit"))
dataTest <- dataTest %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTest <- dataTest %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
dataTest <- dataTest %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
testProbs <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model, dataTest, type= "response"))
auc_value <- auc(testProbs$Outcome, testProbs$Probs)
threshold <- 0.4
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
results[[i]] <- list(
sensitivity = sensitivity,
specificity = specificity
)
cat("Iteration:", i, "AUC:", round(auc_value, 4), "Sensitivity:", round(sensitivity, 4),
"Specificity:", round(specificity, 4), "\n")
}
avg_sensitivity <- mean(sapply(results, function(res) res$sensitivity))
avg_specificity <- mean(sapply(results, function(res) res$specificity))
cat("Average Sensitivity over 30 runs:", round(avg_sensitivity, 4), "\n")
cat("Average Specificity over 30 runs:", round(avg_specificity, 4), "\n")
results <- list()
for (i in 1:100) {
set.seed(312+i)
trainIndex <- createDataPartition(data_model$occupancy_classifier, p = 0.7, list = FALSE, times = 1)
dataTrain <- data_model[trainIndex, ]
dataTest <- data_model[-trainIndex, ]
from_sum <- dataTrain %>%
group_by(from) %>%
summarize(from_count = n(),
from_sum = sum(occupancy_classifier, na.rm = TRUE))
to_sum <- dataTrain %>%
group_by(to) %>%
summarize(to_count = n(),
to_sum = sum(occupancy_classifier, na.rm = TRUE))
stations_train <- stations_sf[,c(1,12)] %>%
left_join(from_sum, by = c("code" = "from")) %>%
left_join(to_sum, by = c("code" = "to")) %>%
replace(is.na(.), 0) %>%
mutate(overall_count = from_count + to_count,
overall_sum = from_sum + to_sum)
coords <- st_coordinates(stations_train)
knn_nb <- knn2nb(knearneigh(coords, k = 5))
neighbor_results <- lapply(1:length(knn_nb), function(i) {
neighbors <- knn_nb[[i]]
overall_count_sum <- sum(stations_train$overall_count[neighbors], na.rm = TRUE)
overall_sum_sum <- sum(stations_train$overall_sum[neighbors], na.rm = TRUE)
return(data.frame(overall_count_sum = overall_count_sum, overall_sum_sum = overall_sum_sum))
})
neighbor_results_df <- do.call(rbind, neighbor_results)
stations_train <- stations_train %>%
bind_cols(neighbor_results_df) %>%
mutate(neighbor = overall_sum_sum / overall_count_sum) %>%
st_drop_geometry()
dataTrain <- dataTrain %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTrain <- dataTrain %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
datetime <- dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice(1:30) %>%
mutate(mapped_datetime = mapped_datetime + days(7)) %>%
bind_rows(
dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice((n() - 29):n()) %>%
mutate(mapped_datetime = mapped_datetime - days(7))
) %>%
bind_rows(dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime))
datetime <- datetime %>%
arrange(mapped_datetime)
dataTrain <- dataTrain %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:30]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
model <- glm(occupancy_classifier ~ type + Temperature + OD_passenger + OD_neighbor + rolling_avg + freq,
data = dataTrain, family="binomial" (link="logit"))
dataTest <- dataTest %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTest <- dataTest %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
dataTest <- dataTest %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:30]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
testProbs <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model, dataTest, type= "response"))
auc_value <- auc(testProbs$Outcome, testProbs$Probs)
threshold <- 0.4
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
results[[i]] <- list(
sensitivity = sensitivity,
specificity = specificity
)
cat("Iteration:", i, "AUC:", round(auc_value, 4), "Sensitivity:", round(sensitivity, 4),
"Specificity:", round(specificity, 4), "\n")
}
avg_sensitivity <- mean(sapply(results, function(res) res$sensitivity))
avg_specificity <- mean(sapply(results, function(res) res$specificity))
cat("Average Sensitivity over 30 runs:", round(avg_sensitivity, 4), "\n")
cat("Average Specificity over 30 runs:", round(avg_specificity, 4), "\n")
results <- list()
for (i in 1:100) {
set.seed(312+i)
trainIndex <- createDataPartition(data_model$occupancy_classifier, p = 0.7, list = FALSE, times = 1)
dataTrain <- data_model[trainIndex, ]
dataTest <- data_model[-trainIndex, ]
from_sum <- dataTrain %>%
group_by(from) %>%
summarize(from_count = n(),
from_sum = sum(occupancy_classifier, na.rm = TRUE))
to_sum <- dataTrain %>%
group_by(to) %>%
summarize(to_count = n(),
to_sum = sum(occupancy_classifier, na.rm = TRUE))
stations_train <- stations_sf[,c(1,12)] %>%
left_join(from_sum, by = c("code" = "from")) %>%
left_join(to_sum, by = c("code" = "to")) %>%
replace(is.na(.), 0) %>%
mutate(overall_count = from_count + to_count,
overall_sum = from_sum + to_sum)
coords <- st_coordinates(stations_train)
knn_nb <- knn2nb(knearneigh(coords, k = 5))
neighbor_results <- lapply(1:length(knn_nb), function(i) {
neighbors <- knn_nb[[i]]
overall_count_sum <- sum(stations_train$overall_count[neighbors], na.rm = TRUE)
overall_sum_sum <- sum(stations_train$overall_sum[neighbors], na.rm = TRUE)
return(data.frame(overall_count_sum = overall_count_sum, overall_sum_sum = overall_sum_sum))
})
neighbor_results_df <- do.call(rbind, neighbor_results)
stations_train <- stations_train %>%
bind_cols(neighbor_results_df) %>%
mutate(neighbor = overall_sum_sum / overall_count_sum) %>%
st_drop_geometry()
dataTrain <- dataTrain %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTrain <- dataTrain %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
datetime <- dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice(1:20) %>%
mutate(mapped_datetime = mapped_datetime + days(7)) %>%
bind_rows(
dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice((n() - 19):n()) %>%
mutate(mapped_datetime = mapped_datetime - days(7))
) %>%
bind_rows(dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime))
datetime <- datetime %>%
arrange(mapped_datetime)
dataTrain <- dataTrain %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
model <- glm(occupancy_classifier ~ type + Temperature + OD_passenger + OD_neighbor + rolling_avg,
data = dataTrain, family="binomial" (link="logit"))
dataTest <- dataTest %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
dataTest <- dataTest %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
dataTest <- dataTest %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
testProbs <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model, dataTest, type= "response"))
auc_value <- auc(testProbs$Outcome, testProbs$Probs)
threshold <- 0.4
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
sensitivity <- confusion_matrix$byClass["Sensitivity"]
specificity <- confusion_matrix$byClass["Specificity"]
results[[i]] <- list(
sensitivity = sensitivity,
specificity = specificity
)
cat("Iteration:", i, "AUC:", round(auc_value, 4), "Sensitivity:", round(sensitivity, 4),
"Specificity:", round(specificity, 4), "\n")
}
avg_sensitivity <- mean(sapply(results, function(res) res$sensitivity))
avg_specificity <- mean(sapply(results, function(res) res$specificity))
cat("Average Sensitivity over 30 runs:", round(avg_sensitivity, 4), "\n")
cat("Average Specificity over 30 runs:", round(avg_specificity, 4), "\n")

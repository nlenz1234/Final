mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
data <- data %>%
rowwise() %>%
# mutate(
#   freq_from = sum(
#     schedules$datetime >= (mapped_datetime - hours(1)) &
#       schedules$datetime <= (mapped_datetime + hours(1)) &
#       schedules$code == from
#   ),
#   freq_to = sum(
#     schedules$datetime >= (mapped_datetime - hours(1)) &
#       schedules$datetime <= (mapped_datetime + hours(1)) &
#       schedules$code == to
#   ),
#   freq = (freq_from + freq_to) / 2
# ) %>%
mutate(
freq_from = sum(
schedules$datetime >= (mapped_datetime - minutes(30)) &
schedules$datetime <= (mapped_datetime + minutes(30)) &
schedules$code == from
),
freq_to = sum(
schedules$datetime >= (mapped_datetime - minutes(30)) &
schedules$datetime <= (mapped_datetime + minutes(30)) &
schedules$code == to
),
freq = (freq_from + freq_to) / 2
) %>%
ungroup()
data_model <- data %>% dplyr::select(occupancy_classifier, datetime_combined, dotw, hour,
time_period, day_time,
from_level, to_level, OD_level, type,
Temperature, Precipitation, OD_passenger, from, to, freq) %>%
mutate(dotw = as.character(dotw), hour = as.factor(hour))
set.seed(1234)
trainIndex <- createDataPartition(data_model$occupancy_classifier, p = 0.7, list = FALSE, times = 1)
dataTrain <- data_model[trainIndex, ]
dataTest <- data_model[-trainIndex, ]
# model <- glm(occupancy_classifier ~ .,
#                   data = dataTrain %>%
#                     dplyr::select(-time_period, -day_time, -OD_level, -OD_passenger, -from, -to),
#                   family="binomial" (link="logit"))
#
# summary(model)
#
# model2 <- glm(occupancy_classifier ~ .,
#                   data = dataTrain %>%
#                     dplyr::select(-dotw, -hour, -time_period, -from_level, -to_level, -OD_passenger, -from, -to),
#                   family="binomial" (link="logit"))
#
# summary(model2)
#
# model3 <- glm(occupancy_classifier ~ .,
#                   data = dataTrain %>%
#                     dplyr::select(-dotw, -hour, -time_period, -from_level, -to_level, -OD_level, -Precipitation, -from, -to),
#                   family="binomial" (link="logit"))
#
# summary(model3)
from_sum <- dataTrain %>%
group_by(from) %>%
summarize(from_count = n(),
from_sum = sum(occupancy_classifier, na.rm = TRUE))
to_sum <- dataTrain %>%
group_by(to) %>%
summarize(to_count = n(),
to_sum = sum(occupancy_classifier, na.rm = TRUE))
stations_train <- stations_sf[,c(1,12)] %>%
left_join(from_sum, by = c("code" = "from")) %>%
left_join(to_sum, by = c("code" = "to")) %>%
replace(is.na(.), 0) %>%
mutate(overall_count = from_count + to_count,
overall_sum = from_sum + to_sum)
coords <- st_coordinates(stations_train)
knn_nb <- knn2nb(knearneigh(coords, k = 5))
neighbor_results <- lapply(1:length(knn_nb), function(i) {
neighbors <- knn_nb[[i]]
overall_count_sum <- sum(stations_train$overall_count[neighbors], na.rm = TRUE)
overall_sum_sum <- sum(stations_train$overall_sum[neighbors], na.rm = TRUE)
return(data.frame(overall_count_sum = overall_count_sum, overall_sum_sum = overall_sum_sum))
})
neighbor_results_df <- do.call(rbind, neighbor_results)
stations_train <- stations_train %>%
bind_cols(neighbor_results_df) %>%
mutate(neighbor = overall_sum_sum / overall_count_sum) %>%
st_drop_geometry()
dataTrain <- dataTrain %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(from_neighbor = neighbor),
by = c("from" = "code")) %>%
left_join(stations_train %>% select(code, neighbor) %>% rename(to_neighbor = neighbor),
by = c("to" = "code")) %>%
mutate(OD_neighbor = (from_neighbor + to_neighbor)/2)
# model4 <- glm(occupancy_classifier ~ .,
#                   data = dataTrain %>%
#                     dplyr::select(-dotw, -hour, -time_period, -from_level, -to_level, -OD_level, -Precipitation, -from, -to, -from_neighbor, -to_neighbor),
#                   family="binomial" (link="logit"))
#
# summary(model4)
dataTrain <- dataTrain %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
datetime <- dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice(1:20) %>%
mutate(mapped_datetime = mapped_datetime + days(7)) %>%
bind_rows(
dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime) %>%
arrange(mapped_datetime) %>%
slice((n() - 19):n()) %>%
mutate(mapped_datetime = mapped_datetime - days(7))
) %>%
bind_rows(dataTrain %>%
dplyr::select(occupancy_classifier, datetime_combined, mapped_datetime))
datetime <- datetime %>%
arrange(mapped_datetime)
dataTrain <- dataTrain %>%
mutate(
rolling_avg = map_dbl(1:n(), function(i) {
distances <- abs(as.numeric(datetime$mapped_datetime - mapped_datetime[i]))
nearest_indices <- order(distances)[1:20]
mean(datetime$occupancy_classifier[nearest_indices], na.rm = TRUE)
})
)
model <- glm(occupancy_classifier ~ type + Temperature + OD_passenger + OD_neighbor + rolling_avg + freq,
data = dataTrain, family="binomial" (link="logit"))
summary(model)
cor(data$Temperature, data$occupancy_classifier)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_TIME", "C")
library(tidyverse)
library(sf)
library(gridExtra)
library(caret)
library(spdep)
library(plotROC)
library(pROC)
data <- read.csv('trains_train.csv') %>%
filter(!(to %in% c("000000000", "(null)"))) %>%
filter(!(from %in% c("(null)"))) %>%
mutate(
OD = paste(from, to, sep = "/"),
type = ifelse(
str_detect(vehicle, "[A-Za-z]"),
str_extract(vehicle, "^[A-Za-z]+"),
"Extra"
),
occupancy_classifier = case_when(
occupancy == "high" ~ 1,
TRUE ~ 0)
) %>%
dplyr::select(-connection, -occupancy)
View(data)
data <- read.csv('trains_train.csv') %>%
filter(!(to %in% c("000000000", "(null)"))) %>%
filter(!(from %in% c("(null)"))) %>%
mutate(
type = ifelse(
str_detect(vehicle, "[A-Za-z]"),
str_extract(vehicle, "^[A-Za-z]+"),
"Extra"
),
occupancy_classifier = case_when(
occupancy == "high" ~ 1,
TRUE ~ 0)
) %>%
dplyr::select(-connection, -occupancy, -vehicle)
data <- data %>%
mutate(
time_24hr = format(parse_date_time(trimws(time), orders = "HMS p"), "%H:%M:%S"),
datetime_combined = ymd(date) + hms(time_24hr),
interval60 = floor_date(datetime_combined, "hour"),
#interval30 = floor_date(datetime_combined, "30 minutes"),
hour = hour(interval60),
#minute = minute(interval30),
#halfhour = hour + ifelse(minute >= 30, 0.5, 0),
dotw = wday(interval60, label = TRUE),
# is_weekend = ifelse(dotw %in% c("Sat", "Sun"), "Weekend", "Weekday"),
date = ymd(date)
)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_TIME", "C")
library(tidyverse)
library(sf)
library(gridExtra)
library(caret)
library(spdep)
library(plotROC)
library(pROC)
data <- read.csv('trains_train.csv') %>%
filter(!(to %in% c("000000000", "(null)"))) %>%
filter(!(from %in% c("(null)"))) %>%
mutate(
# OD = paste(from, to, sep = "/"),
type = ifelse(
str_detect(vehicle, "[A-Za-z]"),
str_extract(vehicle, "^[A-Za-z]+"),
"Extra"
),
occupancy_classifier = case_when(
occupancy == "high" ~ 1,
TRUE ~ 0)
) %>%
dplyr::select(-connection, -occupancy, -vehicle)
data <- data %>%
mutate(
time_24hr = format(parse_date_time(trimws(time), orders = "HMS p"), "%H:%M:%S"),
datetime_combined = ymd(date) + hms(time_24hr),
interval60 = floor_date(datetime_combined, "hour"),
#interval30 = floor_date(datetime_combined, "30 minutes"),
hour = hour(interval60),
#minute = minute(interval30),
#halfhour = hour + ifelse(minute >= 30, 0.5, 0),
dotw = wday(interval60, label = TRUE),
# is_weekend = ifelse(dotw %in% c("Sat", "Sun"), "Weekend", "Weekday"),
date = ymd(date)
)
stations <- read.csv('stations.csv') %>%
mutate(
code = str_extract(URI, "[^/]{9}$"),
Weekday = as.numeric(Weekday),
Weekend = rowMeans(cbind(as.numeric(Saturday), as.numeric(Sunday)), na.rm = TRUE)
) %>%
filter(country.code == "be") %>%
select(code, name, longitude, latitude, Weekday, Weekend) %>%
filter(code %in% unique(c(data$from, data$to)))
from_avg <- data %>%
group_by(from) %>%
summarize(from_count = n(),
from_avg = mean(occupancy_classifier, na.rm = TRUE))
to_avg <- data %>%
group_by(to) %>%
summarize(to_count = n(),
to_avg = mean(occupancy_classifier, na.rm = TRUE))
stations <- stations %>%
mutate(Overall = Weekday * 5/7 + Weekend * 2/7) %>%
left_join(from_avg, by = c("code" = "from")) %>%
left_join(to_avg, by = c("code" = "to")) %>%
replace(is.na(.), 0) %>%
mutate(overall_count = from_count + to_count,
overall_avg = (from_avg * from_count + to_avg * to_count) / (from_count + to_count))
stations_sf <- stations %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
# stations <- stations %>%
#   mutate(level = case_when(
#     Overall > 10000 ~ "A",
#     Overall > 1000 & Overall <= 10000 ~ "B",
#     Overall <= 1000 ~ "C"
#   ))
# data <- data %>%
#   filter(from %in% stations$code & to %in% stations$code) %>%
#   left_join(stations %>% select(code, level) %>% rename(from_level = level),
#             by = c("from" = "code")) %>%
#   left_join(stations %>% select(code, level) %>% rename(to_level = level),
#             by = c("to" = "code")) %>%
#   mutate(OD_level = paste(from_level, to_level, sep = "/"))
data <- data %>%
left_join(stations %>% select(code, Overall) %>% rename(from_passenger = Overall),
by = c("from" = "code")) %>%
left_join(stations %>% select(code, Overall) %>% rename(to_passenger = Overall),
by = c("to" = "code")) %>%
mutate(OD_passenger = log(from_passenger) * log(to_passenger))
schedules <- read.csv("OctSchedules.txt", header = F)
freq <- read.csv("stations_freq.csv")
schedules <- schedules %>%
dplyr::select(V1, V9, V10, V14) %>%
rename(date = V1, arrive_time = V9, depart_time = V10, station = V14) %>%
mutate(time = ifelse(depart_time == "", arrive_time, depart_time)) %>%
dplyr::select(-depart_time, -arrive_time) %>%
mutate(
date = dmy(date),
datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")
) %>%
dplyr::select(-date, -time) %>%
left_join(freq %>% select(station, name), by = "station") %>%
na.omit() %>%
dplyr::select(-station) %>%
left_join(stations %>% select(name, code), by = "name") %>%
dplyr::select(-name)
start_date <- as.POSIXct("2016-10-23 00:00:00")
data <- data %>%
mutate(
mapped_date = as.Date(start_date) + ((as.numeric(as.Date(datetime_combined) - as.Date(start_date))) %% 7),
mapped_datetime = as.POSIXct(paste(mapped_date, format(datetime_combined, "%H:%M:%S")), format = "%Y-%m-%d %H:%M:%S")
)
data <- data %>%
rowwise() %>%
# mutate(
#   freq_from = sum(
#     schedules$datetime >= (mapped_datetime - hours(1)) &
#       schedules$datetime <= (mapped_datetime + hours(1)) &
#       schedules$code == from
#   ),
#   freq_to = sum(
#     schedules$datetime >= (mapped_datetime - hours(1)) &
#       schedules$datetime <= (mapped_datetime + hours(1)) &
#       schedules$code == to
#   ),
#   freq = (freq_from + freq_to) / 2
# ) %>%
mutate(
freq_from = sum(
schedules$datetime >= (mapped_datetime - minutes(30)) &
schedules$datetime <= (mapped_datetime + minutes(30)) &
schedules$code == from
),
freq_to = sum(
schedules$datetime >= (mapped_datetime - minutes(30)) &
schedules$datetime <= (mapped_datetime + minutes(30)) &
schedules$code == to
),
freq = (freq_from + freq_to) / 2
) %>%
ungroup()
data <- data %>%
mutate(type = case_when(
type %in% c("ic") ~ "IC",
type %in% c("ICT", "ICE", "THA", "TRN", "Extra") ~ "Other",
TRUE ~ type
))
weather <- read.csv('weather.csv')
weather <- weather %>%
mutate(
date = ymd(Time),
month_day = format(date, "%m-%d")
)
data <- data %>%
mutate(month_day = format(date, "%m-%d")) %>%
left_join(weather %>% select(month_day, Temperature, Precipitation), by = "month_day")
View(data)
View(stations)
occupancy.Panel <- data %>%
group_by(date) %>%
summarize(count = n(),
high_occupancy_rate = mean(occupancy_classifier))
grid.arrange(
ggplot(occupancy.Panel, aes(date, count)) + geom_line() +
labs(title="Count", x="Date", y="Count") + theme_minimal(),
ggplot(occupancy.Panel, aes(date, high_occupancy_rate)) + geom_line() +
labs(title="High Occupancy Rate", x="Date", y="High Occupancy Rate") + theme_minimal(),
top="Occupancy Data")
occupancy.Panel <- data %>%
group_by(date) %>%
summarize(count = n(),
high_occupancy_rate = mean(occupancy_classifier))
grid.arrange(
ggplot(occupancy.Panel, aes(date, count)) + geom_line() +
labs(title="Count", x="Date", y="Count") + theme_minimal(),
ggplot(occupancy.Panel, aes(date, high_occupancy_rate)) + geom_line() +
labs(title="High Occupancy Rate", x="Date", y="High Occupancy Rate") + theme_minimal(),
top="Occupancy Data")
ggplot(data %>% filter(count > 4), aes(x = dotw, y = hour, fill = high_occupancy_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "High Occupancy Rate Across the Week",
x = "Day of the Week",
y = "Hour of the Day",
fill = "High Occupancy Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_reverse()
View(data)
ggplot(data %>% group_by(dotw, hour) %>% summarize(count = n()) %>% filter(count > 4) %>% ungroup(), aes(x = dotw, y = hour, fill = high_occupancy_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "High Occupancy Rate Across the Week",
x = "Day of the Week",
y = "Hour of the Day",
fill = "High Occupancy Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_reverse()
occupancy.Table <- data %>%
group_by(dotw, hour) %>%
summarise(count = n(), summarise(high_occupancy_rate = mean(occupancy_classifier, na.rm = TRUE)))
occupancy.Table <- data %>%
group_by(dotw, hour) %>%
summarise(count = n(), summarize(high_occupancy_rate = mean(occupancy_classifier, na.rm = TRUE)))
occupancy.Table <- data %>%
group_by(dotw, hour) %>%
summarize(count = n(), high_occupancy_rate = mean(occupancy_classifier, na.rm = TRUE))
data_occupancy <- data %>%
left_join(occupancy.Table, by = c("dotw", "hour"))
ggplot(data_occupancy %>% filter(count > 4), aes(x = dotw, y = hour, fill = high_occupancy_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "High Occupancy Rate Across the Week",
x = "Day of the Week",
y = "Hour of the Day",
fill = "High Occupancy Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_reverse()
be <- st_read("be.shp") %>% st_transform(crs = 4326)
ggplot(data = stations_sf %>% filter(!is.na(overall_avg))) +
geom_sf(data = be, color = "white", alpha = 0.8) +
geom_sf(aes(color = to_avg), size = 2) +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "Average Occupancy by Station",
color = "Overall Avg",
x = "Longitude",
y = "Latitude")
od_data <- data %>%
group_by(OD) %>%
#filter(n() > 3) %>%
summarize(
count = n(),
avg_occupancy = mean(occupancy_classifier, na.rm = TRUE),
from = first(from),
to = first(to)
)
data %>% mutate(
OD = paste(from, to, sep = "/")
)
data <- data %>% mutate(
OD = paste(from, to, sep = "/"))
be <- st_read("be.shp") %>% st_transform(crs = 4326)
ggplot(data = stations_sf %>% filter(!is.na(overall_avg))) +
geom_sf(data = be, color = "white", alpha = 0.8) +
geom_sf(aes(color = to_avg), size = 2) +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "Average Occupancy by Station",
color = "Overall Avg",
x = "Longitude",
y = "Latitude")
od_data <- data %>%
group_by(OD) %>%
#filter(n() > 3) %>%
summarize(
count = n(),
high_occupancy_rate = mean(occupancy_classifier, na.rm = TRUE),
from = first(from),
to = first(to)
)
od_with_coords <- od_data %>%
left_join(stations, by = c("from" = "code")) %>%
rename(from_long = longitude, from_lat = latitude) %>%
left_join(stations, by = c("to" = "code")) %>%
rename(to_long = longitude, to_lat = latitude)
od_lines <- od_with_coords %>%
filter(!is.na(from_long) & !is.na(to_long)) %>%
rowwise() %>%
mutate(geometry = st_sfc(st_linestring(matrix(c(from_long, from_lat, to_long, to_lat), ncol = 2, byrow = TRUE)), crs = 4326)) %>%
st_as_sf()
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = high_occupancy_rate, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "OD Connections with High Occupancy Rate",
x = "Longitude",
y = "Latitude")
be <- st_read("be.shp") %>% st_transform(crs = 4326)
ggplot(data = stations_sf %>% filter(!is.na(overall_avg))) +
geom_sf(data = be, color = "white", alpha = 0.8) +
geom_sf(aes(color = to_avg), size = 2) +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "Average Occupancy by Station",
color = "Overall Avg",
x = "Longitude",
y = "Latitude")
od_data <- data %>%
group_by(OD) %>%
#filter(n() > 3) %>%
summarize(
count = n(),
high_occupancy_rate = mean(occupancy_classifier, na.rm = TRUE),
from = first(from),
to = first(to)
)
od_with_coords <- od_data %>%
left_join(stations, by = c("from" = "code")) %>%
rename(from_long = longitude, from_lat = latitude) %>%
left_join(stations, by = c("to" = "code")) %>%
rename(to_long = longitude, to_lat = latitude)
od_lines <- od_with_coords %>%
filter(!is.na(from_long) & !is.na(to_long)) %>%
rowwise() %>%
mutate(geometry = st_sfc(st_linestring(matrix(c(from_long, from_lat, to_long, to_lat), ncol = 2, byrow = TRUE)), crs = 4326)) %>%
st_as_sf()
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = high_occupancy_rate, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "OD Connections with High Occupancy Rate",
color = "High Occupancy Rate",
alpha = "Count"
x = "Longitude",
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = high_occupancy_rate, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "OD Connections with High Occupancy Rate",
color = "High Occupancy Rate",
alpha = "Count",
x = "Longitude",
y = "Latitude")

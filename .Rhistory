knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_TIME", "C")
library(tidyverse)
library(sf)
library(gridExtra)
library(caret)
library(plotROC)
library(pROC)
data <- read.csv('trains_train.csv') %>%
filter(!(to %in% c("000000000", "(null)"))) %>%
filter(!(from %in% c("(null)"))) %>%
mutate(
OD = paste(from, to, sep = "/"),
type = ifelse(
str_detect(vehicle, "[A-Za-z]"),
str_extract(vehicle, "^[A-Za-z]+"),
"Extra"
),
occupancy_classifier = case_when(
occupancy == "high" ~ 1,
TRUE ~ 0)
) %>%
dplyr::select(-connection, -occupancy)
data <- data %>%
mutate(
time_24hr = format(parse_date_time(trimws(time), orders = "HMS p"), "%H:%M:%S"),
datetime_combined = ymd(date) + hms(time_24hr),
interval60 = floor_date(datetime_combined, "hour"),
#interval30 = floor_date(datetime_combined, "30 minutes"),
hour = hour(interval60),
#minute = minute(interval30),
#halfhour = hour + ifelse(minute >= 30, 0.5, 0),
dotw = wday(interval60, label = TRUE),
is_weekend = ifelse(dotw %in% c("Sat", "Sun"), "Weekend", "Weekday"),
date = ymd(date)
)
count <- data %>%
group_by(dotw, hour) %>%
summarise(count = n())
# count_half <- data %>%
#   group_by(dotw, halfhour) %>%
#   summarise(counthalf = n())
high_occupancy_count <- data %>%
group_by(dotw, hour) %>%
summarise(high_occupancy_count = sum(occupancy_classifier, na.rm = TRUE))
# high_occupancy_count_half <- data %>%
#   group_by(dotw, halfhour) %>%
#   summarise(high_occupancy_counthalf = sum(occupancy_classifier, na.rm = TRUE))
high_occupancy_rate <- data %>%
group_by(dotw, hour) %>%
summarise(high_occupancy_rate = mean(occupancy_classifier, na.rm = TRUE))
# high_occupancy_rate_half <- data %>%
#   group_by(dotw, halfhour) %>%
#   summarise(high_occupancy_ratehalf = mean(occupancy_classifier, na.rm = TRUE))
data <- data %>%
left_join(count, by = c("dotw", "hour")) %>%
#  left_join(high_occupancy_count, by = c("dotw", "hour")) %>%
left_join(high_occupancy_rate, by = c("dotw", "hour"))
# %>% left_join(count_half, by = c("dotw", "halfhour"))
# %>% left_join(high_occupancy_count_half, by = c("dotw", "halfhour"))
# %>% left_join(high_occupancy_rate_half, by = c("dotw", "halfhour"))
occupancy.Panel <- data %>%
group_by(date) %>%
summarize(count = n(),
high_occupancy_rate = mean(occupancy_classifier))
grid.arrange(
ggplot(occupancy.Panel, aes(date, count)) + geom_line() +
labs(title="Count", x="Date", y="Count") + theme_minimal(),
ggplot(occupancy.Panel, aes(date, high_occupancy_rate)) + geom_line() +
labs(title="High Occupancy Rate", x="Date", y="High Occupancy Rate") + theme_minimal(),
top="Occupancy Data")
ggplot(data %>% filter(count > 4), aes(x = dotw, y = hour, fill = high_occupancy_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "High Occupancy Rate Across the Week",
x = "Day of the Week",
y = "Hour of the Day",
fill = "High Occupancy Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_reverse()
weather <- read.csv('weather.csv')
weather <- weather %>%
mutate(
date = ymd(Time),
month_day = format(date, "%m-%d")
)
data <- data %>%
mutate(month_day = format(date, "%m-%d")) %>%
left_join(weather %>% select(month_day, Temperature, Precipitation), by = "month_day")
weather.Panel <- data %>%
group_by(interval60) %>%
summarize(Temperature = max(Temperature),
Precipitation = max(Precipitation))
grid.arrange(
ggplot(weather.Panel, aes(interval60,Temperature)) + geom_line() +
labs(title="Temperature", x="Hour", y="Temperature") + theme_minimal(),
ggplot(weather.Panel, aes(interval60,Precipitation)) + geom_line() +
labs(title="Percipitation", x="Hour", y="Precipitation") + theme_minimal(),
top="Weather Data")
be <- st_read("be.shp") %>% st_transform(crs = 4326)
stations <- read.csv('stations.csv') %>%
mutate(
code = str_extract(URI, "[^/]{9}$"),
Weekday = as.numeric(Weekday),
Weekend = rowMeans(cbind(as.numeric(Saturday), as.numeric(Sunday)), na.rm = TRUE)
) %>%
filter(country.code == "be") %>%
select(code, name, longitude, latitude, Weekday, Weekend) %>%
filter(code %in% unique(c(data$from, data$to)))
from_avg <- data %>%
group_by(from) %>%
summarize(from_count = n(),
from_avg = mean(occupancy_classifier, na.rm = TRUE))
to_avg <- data %>%
group_by(to) %>%
summarize(to_count = n(),
to_avg = mean(occupancy_classifier, na.rm = TRUE))
stations <- stations %>%
mutate(Overall = Weekday * 5/7 + Weekend * 2/7) %>%
left_join(from_avg, by = c("code" = "from")) %>%
left_join(to_avg, by = c("code" = "to")) %>%
replace(is.na(.), 0) %>%
mutate(overall_count = from_count + to_count,
overall_avg = (from_avg * from_count + to_avg * to_count) / (from_count + to_count))
stations_sf <- stations %>%
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
ggplot(data = stations_sf %>% filter(!is.na(from_avg))) +
geom_sf(data = be, color = "white", alpha = 0.8) +
geom_sf(aes(color = from_avg), size = 2) +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "Average Occupancy: Origin",
color = "Origin Avg",
x = "Longitude",
y = "Latitude")
ggplot(data = stations_sf %>% filter(!is.na(to_avg))) +
geom_sf(data = be, color = "white", alpha = 0.8) +
geom_sf(aes(color = to_avg), size = 2) +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "Average Occupancy: Destination",
color = "Dest. Avg",
x = "Longitude",
y = "Latitude")
ggplot(data = stations_sf %>% filter(!is.na(overall_avg))) +
geom_sf(data = be, color = "white", alpha = 0.8) +
geom_sf(aes(color = to_avg), size = 2) +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "Average Occupancy by Station",
color = "Overall Avg",
x = "Longitude",
y = "Latitude")
ggplot(data = stations %>% filter(overall_count > 4)) +
geom_point(aes(Overall, overall_avg), size = 2) +
theme_minimal() +
labs(title = "Passenger Count vs Overall Occupancy",
x = "Passenger Count",
y = "Overall Occupancy")
stations <- stations %>%
mutate(level = case_when(
Overall > 10000 ~ "A",
Overall > 1000 & Overall <= 10000 ~ "B",
Overall <= 1000 ~ "C"
))
data <- data %>%
filter(from %in% stations$code & to %in% stations$code) %>%
left_join(stations %>% select(code, level) %>% rename(from_level = level),
by = c("from" = "code")) %>%
left_join(stations %>% select(code, level) %>% rename(to_level = level),
by = c("to" = "code")) %>%
mutate(OD_level = paste(from_level, to_level, sep = "/"))
data <- data %>%
mutate(time_period = case_when(
hour >= 6 & hour <= 9  ~ "Morning",
hour >= 10 & hour <= 15 ~ "Noon",
hour >= 16 & hour <= 21 ~ "Evening",
TRUE ~ "Night"
)) %>%
mutate(day_time = paste(as.character(dotw), time_period, sep = "/"))
od_data <- data %>%
group_by(OD) %>%
#filter(n() > 3) %>%
summarize(
count = n(),
avg_occupancy = mean(occupancy_classifier, na.rm = TRUE),
from = first(from),
to = first(to)
)
od_with_coords <- od_data %>%
left_join(stations, by = c("from" = "code")) %>%
rename(from_long = longitude, from_lat = latitude) %>%
left_join(stations, by = c("to" = "code")) %>%
rename(to_long = longitude, to_lat = latitude)
od_lines <- od_with_coords %>%
filter(!is.na(from_long) & !is.na(to_long)) %>%
rowwise() %>%
mutate(geometry = st_sfc(st_linestring(matrix(c(from_long, from_lat, to_long, to_lat), ncol = 2, byrow = TRUE)), crs = 4326)) %>%
st_as_sf()
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = avg_occupancy, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "OD Connections with Avg Occupancy",
x = "Longitude",
y = "Latitude")
data <- data %>%
mutate(type = case_when(
type %in% c("ICE", "ICT", "ic") ~ "IC",
type %in% c("THA", "TRN", "Extra") ~ "Other",
TRUE ~ type
))
train_type <- data %>%
group_by(type) %>%
summarize(count = n(),
avg = mean(occupancy_classifier, na.rm = TRUE))
ggplot(train_type, aes(x = fct_reorder(type, avg, .desc = TRUE), y = avg)) +
geom_col(position = position_dodge(width = 0.7), show.legend = FALSE, width = 0.7) +
labs(
title = "Average Occupancy by Train Type",
x = "Train Type",
y = "Average Occupancy"
) +
theme_minimal()
data_model <- data %>% dplyr::select(occupancy_classifier, dotw, hour,
time_period, day_time,
from_level, to_level, OD_level, type,
Temperature, Precipitation) %>%
mutate(dotw = as.character(dotw), hour = as.factor(hour))
set.seed(111)
trainIndex <- createDataPartition(data_model$occupancy_classifier, p = 0.7, list = FALSE, times = 1)
dataTrain <- data_model[trainIndex, ]
dataTest <- data_model[-trainIndex, ]
model <- glm(occupancy_classifier ~ .,
data = dataTrain %>%
dplyr::select(-time_period, -day_time, -OD_level),
family="binomial" (link="logit"))
summary(model)
model2 <- glm(occupancy_classifier ~ .,
data = dataTrain %>%
dplyr::select(-dotw, -hour, -time_period, -from_level, -to_level),
family="binomial" (link="logit"))
summary(model2)
testProbs <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model, dataTest, type= "response"))
auc_value <- auc(testProbs$Outcome, testProbs$Probs)
ggplot(testProbs, aes(d = as.numeric(Outcome), m = Probs)) +
geom_roc(n.cuts = 50, labels = FALSE, colour = "#FE9900") +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1, color = 'grey') +
geom_text(aes(x = 0, y = 0.9, label = paste("ROC:", round(auc_value, 4))),
colour = "black", size = 4, hjust = 0) +
labs(title = "ROC Curve: Original Model") +
theme(plot.caption = element_text(hjust = 0))
testProbs2 <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model2, dataTest, type= "response"))
auc_value <- auc(testProbs2$Outcome, testProbs2$Probs)
ggplot(testProbs2, aes(d = as.numeric(Outcome), m = Probs)) +
geom_roc(n.cuts = 50, labels = FALSE, colour = "#FE9900") +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1, color = 'grey') +
geom_text(aes(x = 0, y = 0.9, label = paste("ROC:", round(auc_value, 4))),
colour = "black", size = 4, hjust = 0) +
labs(title = "ROC Curve: Engineered Model") +
theme(plot.caption = element_text(hjust = 0))
threshold <- 0.5
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
print(confusion_matrix)
testProbs2 <- testProbs2 %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs2$Predicted, testProbs2$Outcome, positive = "High")
print(confusion_matrix)
View(data)
View(data)
View(stations)
ggplot(data %>% filter(count > 4), aes(x = dotw, y = hour, fill = high_occupancy_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "High Occupancy Rate Across the Week",
x = "Day of the Week",
y = "Hour of the Day",
fill = "High Occupancy Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_reverse()
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = avg_occupancy, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "OD Connections with Avg Occupancy",
x = "Longitude",
y = "Latitude")
od_data <- data %>%
group_by(OD) %>%
#filter(n() > 3) %>%
summarize(
count = n(),
avg_occupancy = mean(occupancy_classifier, na.rm = TRUE),
from = first(from),
to = first(to)
)
od_with_coords <- od_data %>%
left_join(stations, by = c("from" = "code")) %>%
rename(from_long = longitude, from_lat = latitude) %>%
left_join(stations, by = c("to" = "code")) %>%
rename(to_long = longitude, to_lat = latitude)
od_lines <- od_with_coords %>%
filter(!is.na(from_long) & !is.na(to_long)) %>%
rowwise() %>%
mutate(geometry = st_sfc(st_linestring(matrix(c(from_long, from_lat, to_long, to_lat), ncol = 2, byrow = TRUE)), crs = 4326)) %>%
st_as_sf()
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = avg_occupancy, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "OD Connections with Avg Occupancy",
x = "Longitude",
y = "Latitude")
od_data <- data %>%
group_by(OD) %>%
#filter(n() > 3) %>%
summarize(
count = n(),
avg_occupancy = mean(occupancy_classifier, na.rm = TRUE),
from = first(from),
to = first(to)
)
od_with_coords <- od_data %>%
left_join(stations, by = c("from" = "code")) %>%
rename(from_long = longitude, from_lat = latitude) %>%
left_join(stations, by = c("to" = "code")) %>%
rename(to_long = longitude, to_lat = latitude)
od_lines <- od_with_coords %>%
filter(!is.na(from_long) & !is.na(to_long)) %>%
rowwise() %>%
mutate(geometry = st_sfc(st_linestring(matrix(c(from_long, from_lat, to_long, to_lat), ncol = 2, byrow = TRUE)), crs = 4326)) %>%
st_as_sf()
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = avg_occupancy, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(title = "OD Connections with Avg Occupancy",
x = "Longitude",
y = "Latitude")
ggplot(data %>% filter(count > 4), aes(x = dotw, y = hour, fill = high_occupancy_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "High Occupancy Rate Across the Week",
x = "Day of the Week",
y = "Hour of the Day",
fill = "High Occupancy Rate") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_reverse()
ggplot(data %>% filter(count > 4), aes(x = dotw, y = hour, fill = high_occupancy_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(
title = "High Occupancy Rate Across the Week",
x = "Day of the Week",
y = "Hour of the Day",
fill = "High Occupancy Rate"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",  # 将图例放到底部
plot.title = element_text(face = "bold")  # 加粗标题
) +
scale_y_reverse()
ggplot() +
geom_sf(data = be, color = "white", alpha = 0.5) +
geom_sf(data = stations_sf, color = "black", size = 1.5) +
geom_sf(data = od_lines, aes(color = avg_occupancy, alpha = count), linewidth = 1) +
scale_alpha(range = c(0.4, 1), guide = "legend") +
scale_color_gradient(low = "grey80", high = "firebrick") +
theme_minimal() +
labs(
title = "OD Connections with Avg Occupancy",
x = "Longitude",
y = "Latitude"
) +
theme(
legend.position = "bottom",            # 图例位置调整到底部
plot.title = element_text(face = "bold"),  # 标题加粗
legend.title = element_text(face = "bold"), # 图例标题加粗（可选）
legend.text = element_text(size = 10)  # 图例文字调整大小（可选）
)
testProbs2 <- data.frame(Outcome = as.factor(dataTest$occupancy_classifier),
Probs = predict(model2, dataTest, type= "response"))
auc_value <- auc(testProbs2$Outcome, testProbs2$Probs)
ggplot(testProbs2, aes(d = as.numeric(Outcome), m = Probs)) +
geom_roc(n.cuts = 50, labels = FALSE, colour = "#FE9900") +
style_roc(theme = theme_grey) +
geom_abline(slope = 1, intercept = 0, size = 1, color = 'grey') +
geom_text(aes(x = 0, y = 0.9, label = paste("ROC:", round(auc_value, 4))),
colour = "black", size = 4, hjust = 0) +
labs(title = "ROC Curve: Engineered Model") +
theme(plot.caption = element_text(hjust = 0))
(184+19)/(439+16)
(184+19)/(439+16+184+19)
threshold <- 0.3
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
print(confusion_matrix)
testProbs2 <- testProbs2 %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs2$Predicted, testProbs2$Outcome, positive = "High")
print(confusion_matrix)
threshold <- 0.5
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
print(confusion_matrix)
testProbs2 <- testProbs2 %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs2$Predicted, testProbs2$Outcome, positive = "High")
print(confusion_matrix)
threshold <- 0.3
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
print(confusion_matrix)
testProbs2 <- testProbs2 %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs2$Predicted, testProbs2$Outcome, positive = "High")
print(confusion_matrix)
threshold <- 0.4
dataTest_factor <- dataTest %>%
mutate(occupancy_classifier = factor(occupancy_classifier,
levels = c(0, 1),
labels = c("Low", "High")))
testProbs <- testProbs %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs$Predicted, testProbs$Outcome, positive = "High")
print(confusion_matrix)
testProbs2 <- testProbs2 %>%
mutate(
Predicted = ifelse(Probs >= threshold, "High", "Low"),
Predicted = factor(Predicted, levels = c("Low", "High")),
Outcome = dataTest_factor$occupancy_classifier
)
confusion_matrix <- confusionMatrix(testProbs2$Predicted, testProbs2$Outcome, positive = "High")
print(confusion_matrix)
